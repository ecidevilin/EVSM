#pragma kernel KernelFirstFiltering
#pragma kernel KernelFiltering

#define NUM_THREADS 128

Texture2D<float4> _MainLightShadowmapTexture;
Texture2D<float4> _InputTex;
RWTexture2D<float4> _OutputTex;
float4 _InputTex_TexelSize;

float4 _EVSMExponent;

uint _Vertical;

groupshared float4 cache[NUM_THREADS];

static const float coeff7[7] = { 0.00598,0.060626,0.241843,0.383103,0.241843,0.060626,0.00598};

float4 FilterCache(uint3 gtid )
{
    float4 sum = 0;
    [unroll]
    for (int i = 0; i < 7; i++)
    {
        float4 p = cache[clamp(gtid.x - 3 + i, 0, NUM_THREADS - 1)];
        sum = p * coeff7[i] + sum;
    }
    return sum;
}

float2 GetTexCoord(uint3 id, uint3 gid)
{
    uint2 texCoord = uint2(clamp(id.x - 6 * gid.x - 3, 0, _InputTex_TexelSize.z), id.y);
    if (_Vertical == 1)
    {
        texCoord.xy = texCoord.yx;
    }
    return texCoord;
}

[numthreads(NUM_THREADS,1,1)]
void KernelFirstFiltering(uint3 id : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    uint2 texCoord = GetTexCoord(id, gid);
    float4 v = float4(0,0,0,0);

    float s = _MainLightShadowmapTexture[texCoord].x * 2.0f - 1.0f;
    v = exp2(s * _EVSMExponent);
    v.y = -v.y;

    cache[gtid.x] = v; 
    GroupMemoryBarrierWithGroupSync();
	int4 ts = int4(-3, NUM_THREADS - 4, _InputTex_TexelSize.zw - 1);
	int4 tc = int4(0 - gtid.x, gtid.x, texCoord.xy);
	if (any(tc > ts))
	{
		return;
	}
    _OutputTex[texCoord.xy] = FilterCache(gtid);
}

[numthreads(NUM_THREADS,1,1)]
void KernelFiltering (uint3 id : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    uint2 texCoord = GetTexCoord(id, gid);
    float4 v = float4(0,0,0,0);

    v = _InputTex[texCoord];

    cache[gtid.x] = v; 
    GroupMemoryBarrierWithGroupSync();
	int4 ts = int4(-3, NUM_THREADS - 4, _InputTex_TexelSize.zw - 1);
	int4 tc = int4(0-gtid.x, gtid.x, texCoord.xy);
    if (any(tc > ts))
    {
        return;
    }
    _OutputTex[texCoord.xy] = FilterCache(gtid);
}